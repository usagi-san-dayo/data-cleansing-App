selectedOrder <- getOrder(cleanser$cleansingForm, input$colNameFactor)
numOrder <- mkOrdinal(selectedOrder)
updateSelectInput(session, "order", paste0("Select as the ", numOrder, " order"), choices = na.omit(getRepPoolLevels(cleanser$cleansingForm, input$colNameFactor)), selected = selectedOrder)
isColChanged_pool <<- TRUE
isColChanged_order <<- TRUE
dataValuesFactor$data <- right_tableManager(dataValuesFactor, input$colNameFactor)
}
},
ignoreNULL = FALSE
)
observeEvent(
input$newColNameFactor,{
if (!is.null(cleanser$cleansingForm$factor) & any(dim(cleanser$dataset) != c(0, 0))) {
changeColName_factor(input$colNameFactor, input$newColNameFactor)
dataValuesFactor$data <- right_tableManager(dataValuesFactor, input$colNameFactor)
}
},
ignoreNULL = FALSE
)
observeEvent(
input$colNameDate,{
if (!is.null(cleanser$cleansingForm$Date) & any(dim(cleanser$dataset) != c(0, 0))) {
dataValuesDate$data <- right_tableManager(dataValuesDate, input$colNameDate)
}
},
ignoreNULL = FALSE
)
observeEvent(
input$newColNameDate,{
if (!is.null(cleanser$cleansingForm$Date) & any(dim(cleanser$dataset) != c(0, 0))) {
changeColName_Date(input$colNameDate, input$newColNameDate)
dataValuesDate$data <- right_tableManager(dataValuesDate, input$colNameDate)
}
},
ignoreNULL = FALSE
)
observeEvent(
input$numeric_NA,{
if (!is.null(cleanser$cleansingForm$numeric) & any(dim(cleanser$dataset) != c(0, 0))) {
replaceWithMean(input$colName, input$numeric_NA)
dataValues$data <- right_tableManager(dataValues, input$colName)
}
},
ignoreNULL = FALSE
)
observeEvent(
input$categorise,{
if (!is.null(cleanser$cleansingForm$numeric) & any(dim(cleanser$dataset) != c(0, 0))) {
categorise(input$colName, input$categorise)
dataValues$data <- right_tableManager(dataValues, input$colName)
}
},
ignoreNULL = FALSE
)
observeEvent(
input$factor_NA,{
row_startTable <- 3
col_poolTable <- 7
replaceWithNA(input$colNameFactor, input$factor_NA, input$pool, session)
table <- searchColname(cleanser$cleansingForm, input$colNameFactor)
if (!is.null(table)) {
if (length(input$pool) == 0 & length(input$factor_NA) > 0 & all(table[row_startTable : (nrow(table) - 1), col_poolTable] == "")) {
updateSelectInput(session, "pool", "Select any combinations of pooled levels", choices = getPooledLevels(cleanser$cleansingForm, input$colNameFactor))
}
}
updateSelectInput(session, "order", paste0("Select as the 1st order"), choices = na.omit(getRepPoolLevels(cleanser$cleansingForm, input$colNameFactor)), selected = character(0))
dataValuesFactor$data <- right_tableManager(dataValuesFactor, input$colNameFactor)
},
ignoreNULL = FALSE
)
observeEvent(
input$pool,{
updateSelectInput(session, "pool", "Select any combinations of pooled levels", choices = delChoicesPool(cleanser$cleansingForm, input$colNameFactor, input$pool), selected = input$pool)
poolLevels(input$colNameFactor, input$pool, input$order, session)
updateSelectInput(session, "order", paste0("Select as the 1st order"), choices = na.omit(getRepPoolLevels(cleanser$cleansingForm, input$colNameFactor)), selected = character(0))
dataValuesFactor$data <- right_tableManager(dataValuesFactor, input$colNameFactor)
},
ignoreNULL = FALSE
)
observeEvent(
input$order,{
numOrder <- mkOrdinal(input$order)
updateSelectInput(session, "order", paste0("Select as the ", numOrder, " order"), choices = na.omit(getRepPoolLevels(cleanser$cleansingForm, input$colNameFactor)), selected = input$order)
orderLevels(input$colNameFactor, input$order, session)
dataValuesFactor$data <- right_tableManager(dataValuesFactor, input$colNameFactor)
},
ignoreNULL = FALSE
)
observeEvent(
input$options,{
formHandler_numeric(input$options, input$colName)
dataValues$data <- right_tableManager(dataValues, input$colName)
},
ignoreNULL = FALSE
)
observeEvent(
input$optionsFactor,{
formHandler_factor(input$optionsFactor, input$colNameFactor)
dataValuesFactor$data <- right_tableManager(dataValuesFactor, input$colNameFactor)
},
ignoreNULL = FALSE
)
observeEvent(
input$optionsDate,{
formHandler_Date(input$optionsDate, input$colNameDate)
dataValuesDate$data <- right_tableManager(dataValuesDate, input$colNameDate)
},
ignoreNULL = FALSE
)
output$selectedDir <- renderText({
if(!is.null(input$dir)){
dirInfo <- parseDirPath(volumes, input$dir)
}
})
output$imported <- renderDataTable({
if (!is.null(input$file)) {
csvFile <- cleanser$readData(gsub("\\.csv", "", input$file$datapath), input$encode)
importdData <- datatable(csvFile, options = list(scrollX = TRUE, scrollY = "75vh", scrollCollapse = TRUE))
}
})
output$preview <- renderDataTable({
if (any(dim(cleanser$dataset) != c(0, 0))) {
previewDataset <- datatable(preDataValues$data, options = list(scrollX = TRUE, scrollY = "75vh", scrollCollapse = TRUE))
}
})
output$options <- renderRHandsontable({
if (!is.null(cleanser$cleansingForm$numeric) & any(dim(cleanser$dataset) != c(0, 0)) & input$colName != "") {
isColChanged_repMissVal <<- FALSE
rhandsontable(dataValues$data)
}
})
output$optionsFactor <- renderRHandsontable({
if (!is.null(cleanser$cleansingForm$factor) & any(dim(cleanser$dataset) != c(0, 0)) & input$colNameFactor != "") {
isColChanged_repNA <<- FALSE
isColChanged_pool <<- FALSE
isColChanged_order <<- FALSE
rhandsontable(dataValuesFactor$data)
}
})
output$optionsDate <- renderRHandsontable({
if (!is.null(cleanser$cleansingForm$Date) & any(dim(cleanser$dataset) != c(0, 0)) & input$colNameDate != "") {
rhandsontable(dataValuesDate$data)
}
})
output$view <- renderDataTable({
if (!is.null(cleanser$cleansingForm$numeric) & any(dim(cleanser$dataset) != c(0, 0)) & input$colName != "") {
dataset <- datatable(output_dataNumeric(cleanser$dataset, input$colName, input$newColName, input$numeric_NA, input$options, session), options = list(scrollX = TRUE, scrollY = "60vh", scrollCollapse = TRUE))
}
})
output$viewFactor <- renderDataTable({
if (!is.null(cleanser$cleansingForm$factor) & any(dim(cleanser$dataset) != c(0, 0)) & input$colNameFactor != "") {
datasetFactor <- datatable(output_dataFactor(cleanser$dataset, input$colNameFactor, input$newColNameFactor, input$factor_NA, input$pool, input$order, input$optionsFactor, session), options = list(scrollX = TRUE, scrollY = "60vh", scrollCollapse = TRUE))
}
})
output$viewDate <- renderDataTable({
if (!is.null(cleanser$cleansingForm$Date) & any(dim(cleanser$dataset) != c(0, 0)) & input$colNameDate != "") {
datasetDate <- datatable(output_dataDate(cleanser$dataset, input$colNameDate, input$newColNameDate, input$optionsDate), options = list(scrollX = TRUE, scrollY = "60vh", scrollCollapse = TRUE))
}
})
output$downloadSave <- downloadHandler(
filename = paste0("data", ".zip"),
content = function(file) {
if (any(dim(cleanser$dataset) != c(0, 0))) {
output_cleansingForm(file, cleanser$fileInfo, volumes, input$dir, cleanser$cleansingForm, input$encode)
}
},
contentType = "application/zip"
)
}
# Run the application
shinyApp(ui = ui, server = server)
cleanser$cleansingForm
cleanser$cleansingForm[[3]]
dataList <- mergeCleansingForm(cleansingForm)
dataList <- mergeCleansingForm(cleanser$cleansingForm)
dataList
for (i in seq_len(length(dataList))) {
dataList[[i]] <- replace(dataList[[i]], dataList[[i]] == "", NA)
rownames(dataList[[i]]) <- seq_len(nrow(dataList[[i]]))
}
dataList
data
cleanser$dataset
data<-cleanser$dataset
for (i in colnames(data)) {
if (!is.na(any(dataList[[1]][, 1] == i))) {
data <- cleanser$cleansNumeric(data, i, replace(dataList[[1]], dataList[[1]] == "", NA), append)
}
if (!is.na(any(dataList[[2]][, 1] == i))) {
data <- cleanser$cleansFactor(data, i, replace(dataList[[2]], dataList[[2]] == "", NA), append)
}
if (!is.na(any(dataList[[3]][, 1] == i))) {
data <- cleanser$cleansDate(data, i, replace(dataList[[3]], dataList[[3]] == "", NA))
}
}
data
data<-cleanser$dataset
colnames(data)[1]
i=colnames(data)[1]
i=colnames(data)[7]
i
!is.na(any(dataList[[3]][, 1] == i))
cleanser$cleansDate(data, i, replace(dataList[[3]], dataList[[3]] == "", NA))
dadta
data
refData <- dataList[[3]]
index
data
dataany(refData[, 1] == index)
any(refData[, 1] == index)
asDatedVector <- rep(FALSE, nrow(data))
options(warn = -1)
rowNumber <- as.numeric(rownames(refData[refData[, 1] == index & !is.na(refData[, 1]), ]))
colnames(data)[colnames(data) == index] <- changeColName(data, index, refData, rowNumber)
index <- changeColName(data, index, refData, rowNumber)
formCharData <- dateClassifier(data, index)
formCharData
data
DateFormats <- list(c("Y", "m", "d"), c("Y", "d", "m"), c("m", "Y", "d"), c("m", "d", "Y"), c("d", "Y", "m"), c("d", "m", "Y"))
formatAndDate <- NULL
delimiter <- lapply(strsplit(data[, index], ""), function(x) {
return(x[grep("[^0-9]", x)])
})
indexDelim <- lapply(strsplit(data[, index], ""), function(x) {
dateList <- list()
delStr <- c(0, grep("[^0-9]", x))
for (i in seq_len(length(delStr))) {
if (i == length(delStr)) {
dateList[[i]] <- (delStr[i] + 1) : length(x)
}
else {
dateList[[i]] <- (delStr[i] + 1) : (delStr[i + 1] - 1)
}
}
return(list(index = dateList, delim = x[grep("[^0-9]", x)], indexDelim = grep("[^0-9]", x), data = x))
})
delimiter
indexDelim
arrangedIndex <- lapply(indexDelim, function(x) {
index <- NULL
for (i in seq_len(2)) {
index <- append(index, c(x$index[[order(x$delim)[i]]], x$indexDelim[order(x$delim)[i]]))
}
if (length(x$delim) == 2) {
index <- append(index, x$index[[3]])
}
else {
index <- append(index, x$index[[order(x$delim[3])]])
}
return(list(index = index, data = x$data))
})
arrangedIndex
indexDelim
indexDelim
x<-indexDelim[[1]]
index <- NULL
for (i in seq_len(2)) {
index <- append(index, c(x$index[[order(x$delim)[i]]], x$indexDelim[order(x$delim)[i]]))
}
index
x
strsplit(data[, index], "")
data[, index]
index
strsplit(data[, "time"], "")
x<-strsplit(data[, "time"], "")[[1]]
dateList <- list()
delStr <- c(0, grep("[^0-9]", x))
delStr
x
i=1
dateList[[i]] <- (delStr[i] + 1) : (delStr[i + 1] - 1)
dataList[[1]]
dateList[[1]]
i=2
delStr[i] + 1
x
delStr[i + 1]
(delStr[i + 1] - 1)
dateList[[i]] <- (delStr[i] + 1) : (delStr[i + 1] - 1)
dataList[[2]]
dateList[[2]]
dateList
i=3
(delStr[i] + 1)
x
(delStr[i+1] + 1)
(delStr[i+1] - 1)
dateList[[i]] <- (delStr[i] + 1) : (delStr[i + 1] - 1)
dateList
i=4
(delStr[i] + 1) : length(x)
x
length(delStr)
DateFormats <- list(c("Y", "m", "d"), c("Y", "d", "m"), c("m", "Y", "d"), c("m", "d", "Y"), c("d", "Y", "m"), c("d", "m", "Y"))
formatAndDate <- NULL
delimiter <- lapply(strsplit(data[, index], ""), function(x) {
return(x[grep("[^0-9]", x)])
})
indexDelim <- lapply(strsplit(data[, index], ""), function(x) {
dateList <- list()
delStr <- c(0, grep("[^0-9]", x))
for (i in seq_len(length(delStr))) {
if (i == length(delStr) & length(delStr) < 4) {
dateList[[i]] <- (delStr[i] + 1) : length(x)
}
else if (i < length(delStr)) {
dateList[[i]] <- (delStr[i] + 1) : (delStr[i + 1] - 1)
}
}
return(list(index = dateList, delim = x[grep("[^0-9]", x)], indexDelim = grep("[^0-9]", x), data = x))
})
index
i
index <- "time"
DateFormats <- list(c("Y", "m", "d"), c("Y", "d", "m"), c("m", "Y", "d"), c("m", "d", "Y"), c("d", "Y", "m"), c("d", "m", "Y"))
formatAndDate <- NULL
delimiter <- lapply(strsplit(data[, index], ""), function(x) {
return(x[grep("[^0-9]", x)])
})
indexDelim <- lapply(strsplit(data[, index], ""), function(x) {
dateList <- list()
delStr <- c(0, grep("[^0-9]", x))
for (i in seq_len(length(delStr))) {
if (i == length(delStr) & length(delStr) < 4) {
dateList[[i]] <- (delStr[i] + 1) : length(x)
}
else if (i < length(delStr)) {
dateList[[i]] <- (delStr[i] + 1) : (delStr[i + 1] - 1)
}
}
return(list(index = dateList, delim = x[grep("[^0-9]", x)], indexDelim = grep("[^0-9]", x), data = x))
})
indexDelim
arrangedIndex <- lapply(indexDelim, function(x) {
index <- NULL
for (i in seq_len(2)) {
index <- append(index, c(x$index[[order(x$delim)[i]]], x$indexDelim[order(x$delim)[i]]))
}
if (length(x$delim) == 2) {
index <- append(index, x$index[[3]])
}
else {
index <- append(index, x$index[[order(x$delim[3])]])
}
return(list(index = index, data = x$data))
})
data[, index] <- unlist(lapply(arrangedIndex, function(x) {
return(paste(x$data[x$index], collapse = ""))
}))
arrangeIndex
arrangdeIndex
arrangedIndex
order(c("年","月","日"))
indexDelim
unlist(lapply(arrangedIndex, function(x) {
return(paste(x$data[x$index], collapse = ""))
}))
x<-indexDelim[[1]]
index <- NULL
for (i in seq_len(2)) {
index <- append(index, c(x$index[[order(x$delim)[i]]], x$indexDelim[order(x$delim)[i]]))
}
index
length(x$delim)
append(index, x$index[[order(x$delim[3])]])
x
order(x$delim[3])
x$delim[3]
order(x$delim[3])
index
c(x$index[[order(x$delim)[1]]], x$indexDelim[order(x$delim)[1]])
c(x$index[[order(x$delim)[2]]], x$indexDelim[order(x$delim)[2]])
x$index
c(x$index[[order(x$delim[3])]], x$indexDelim[order(x$delim)[3]])
arrangedIndex <- lapply(indexDelim, function(x) {
index <- NULL
for (i in seq_len(2)) {
index <- append(index, c(x$index[[order(x$delim)[i]]], x$indexDelim[order(x$delim)[i]]))
}
if (length(x$delim) == 2) {
index <- append(index, x$index[[3]])
}
else {
index <- append(index, c(x$index[[order(x$delim[3])]], x$indexDelim[order(x$delim)[3]]))
}
return(list(index = index, data = x$data))
})
arrangedIndex
data[, index] <- unlist(lapply(arrangedIndex, function(x) {
return(paste(x$data[x$index], collapse = ""))
}))
formatStr
DateFormats
for (formatStr in DateFormats) {
format <- paste0("%", formatStr[1], "-%", formatStr[2], "-%", formatStr[3])
options(warn = -1)
dateData <- replace(data[, index], data[, index] == "", NA)
dateData <- gsub("[^0-9]", "-", as.character(dateData))
dateData <- replace(dateData, nchar(gsub("[^-]", "", dateData)) != 2 | lapply(strsplit(dateData, "-"), length) != 3, NA)
date_dataFrame <- as.data.frame(strsplit(dateData, "-"))
YmdOrder <- c(match("Y", formatStr), match("m", formatStr), match("d", formatStr))
charData <- paste0(formatC(as.numeric(date_dataFrame[YmdOrder[1], ]), width = 4, flag = "0"), "-",
formatC(as.numeric(date_dataFrame[YmdOrder[2], ]), width = 2, flag = "0"), "-",
formatC(as.numeric(date_dataFrame[YmdOrder[3], ]), width = 2, flag = "0"))
options(warn = 0)
formatAndDate[[length(formatAndDate) + 1]] <- list(format = format, date = charData)
}
formatAndDate
data
data <- cleanser$dataset
data[, index] <- unlist(lapply(arrangedIndex, function(x) {
return(paste(x$data[x$index], collapse = ""))
}))
data
data <- cleanser$dataset
data
data[, index] <- unlist(lapply(arrangedIndex, function(x) {
return(paste(x$data[x$index], collapse = ""))
}))arrangedIndex
arrangedIndex
x<-arrangedIndex[[1]]
paste(x$data[x$index], collapse = "")
unlist(lapply(arrangedIndex, function(x) {
return(paste(x$data[x$index], collapse = ""))
}))
index
index <- "time"
data[, index] <- unlist(lapply(arrangedIndex, function(x) {
return(paste(x$data[x$index], collapse = ""))
}))
indexdata
data
for (formatStr in DateFormats) {
format <- paste0("%", formatStr[1], "-%", formatStr[2], "-%", formatStr[3])
options(warn = -1)
dateData <- replace(data[, index], data[, index] == "", NA)
dateData <- gsub("[^0-9]", "-", as.character(dateData))
dateData <- replace(dateData, nchar(gsub("[^-]", "", dateData)) != 2 | lapply(strsplit(dateData, "-"), length) != 3, NA)
date_dataFrame <- as.data.frame(strsplit(dateData, "-"))
YmdOrder <- c(match("Y", formatStr), match("m", formatStr), match("d", formatStr))
charData <- paste0(formatC(as.numeric(date_dataFrame[YmdOrder[1], ]), width = 4, flag = "0"), "-",
formatC(as.numeric(date_dataFrame[YmdOrder[2], ]), width = 2, flag = "0"), "-",
formatC(as.numeric(date_dataFrame[YmdOrder[3], ]), width = 2, flag = "0"))
options(warn = 0)
formatAndDate[[length(formatAndDate) + 1]] <- list(format = format, date = charData)
}
formatAndDate
formatStr <- DateFormats[1]
format <- paste0("%", formatStr[1], "-%", formatStr[2], "-%", formatStr[3])
options(warn = -1)
format
DateFormats
formatStr <- DateFormats[[1]]
format <- paste0("%", formatStr[1], "-%", formatStr[2], "-%", formatStr[3])
options(warn = -1)
dateData <- replace(data[, index], data[, index] == "", NA)
format
dateData
dateData <- gsub("[^0-9]", "-", as.character(dateData))
dateData <- gsub("[^0-9]", "-", as.character(dateData))
dateData
arrangedIndex <- lapply(indexDelim, function(x) {
index <- NULL
for (i in seq_len(2)) {
index <- append(index, c(x$index[[order(x$delim)[i]]], x$indexDelim[order(x$delim)[i]]))
}
if (length(x$delim) == 2) {
index <- append(index, x$index[[3]])
}
else {
index <- append(index, x$index[[order(x$delim[3])]])
}
return(list(index = index, data = x$data))
})
arrangedIndex
dataindex
index
data[, index] <- unlist(lapply(arrangedIndex, function(x) {
return(paste(x$data[x$index], collapse = ""))
}))
data
format <- paste0("%", formatStr[1], "-%", formatStr[2], "-%", formatStr[3])
options(warn = -1)
dateData <- replace(data[, index], data[, index] == "", NA)
dateData <- gsub("[^0-9]", "-", as.character(dateData))
dateData
dateData <- replace(dateData, nchar(gsub("[^-]", "", dateData)) != 2 | lapply(strsplit(dateData, "-"), length) != 3, NA)
dateData
date_dataFrame <- as.data.frame(strsplit(dateData, "-"))
date_dataFrame
YmdOrder <- c(match("Y", formatStr), match("m", formatStr), match("d", formatStr))
YmdOrder
date_dataFrame[YmdOrder[1], ]
as.numeric(date_dataFrame[YmdOrder[1], ])
date_dataFrame[1,]
date_dataFrame[1,1]
for (formatStr in DateFormats) {
format <- paste0("%", formatStr[1], "-%", formatStr[2], "-%", formatStr[3])
options(warn = -1)
dateData <- replace(data[, index], data[, index] == "", NA)
dateData <- gsub("[^0-9]", "-", as.character(dateData))
dateData <- replace(dateData, nchar(gsub("[^-]", "", dateData)) != 2 | lapply(strsplit(dateData, "-"), length) != 3, NA)
date_dataFrame <- as.data.frame(strsplit(dateData, "-"), stringsAsFactors = FALSE)
YmdOrder <- c(match("Y", formatStr), match("m", formatStr), match("d", formatStr))
charData <- paste0(formatC(as.numeric(date_dataFrame[YmdOrder[1], ]), width = 4, flag = "0"), "-",
formatC(as.numeric(date_dataFrame[YmdOrder[2], ]), width = 2, flag = "0"), "-",
formatC(as.numeric(date_dataFrame[YmdOrder[3], ]), width = 2, flag = "0"))
options(warn = 0)
formatAndDate[[length(formatAndDate) + 1]] <- list(format = format, date = charData)
}
formatAndDate
